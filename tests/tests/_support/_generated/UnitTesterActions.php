<?php  //[STAMP] b7aa0b87722e69fb4b5f8ee534eb2635
namespace _generated;

// This class was automatically generated by build task
// You should not change it manually as it will be overwritten on next build
// @codingStandardsIgnoreFile

use Codeception\Module\Asserts;
use Helper\Unit;
use Codeception\Module\Drupal7\Drupal7;
use Codeception\Module\Db;

trait UnitTesterActions
{
    /**
     * @return \Codeception\Scenario
     */
    abstract protected function getScenario();

    
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that two variables are equal. If you're comparing floating-point values,
     * you can specify the optional "delta" parameter which dictates how great of a precision
     * error are you willing to tolerate in order to consider the two values equal.
     *
     * Regular example:
     * ```php
     * <?php
     * $I->assertEquals($element->getChildrenCount(), 5);
     * ```
     *
     * Floating-point example:
     * ```php
     * <?php
     * $I->assertEquals($calculator->add(0.1, 0.2), 0.3, 'Calculator should add the two numbers correctly.', 0.01);
     * ```
     *
     * @param        $expected
     * @param        $actual
     * @param string $message
     * @param float  $delta
     * @see \Codeception\Module\Asserts::assertEquals()
     */
    public function assertEquals($expected, $actual, $message = null, $delta = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertEquals', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that two variables are not equal. If you're comparing floating-point values,
     * you can specify the optional "delta" parameter which dictates how great of a precision
     * error are you willing to tolerate in order to consider the two values not equal.
     *
     * Regular example:
     * ```php
     * <?php
     * $I->assertNotEquals($element->getChildrenCount(), 0);
     * ```
     *
     * Floating-point example:
     * ```php
     * <?php
     * $I->assertNotEquals($calculator->add(0.1, 0.2), 0.4, 'Calculator should add the two numbers correctly.', 0.01);
     * ```
     *
     * @param        $expected
     * @param        $actual
     * @param string $message
     * @param float  $delta
     * @see \Codeception\Module\Asserts::assertNotEquals()
     */
    public function assertNotEquals($expected, $actual, $message = null, $delta = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertNotEquals', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that two variables are same
     *
     * @param        $expected
     * @param        $actual
     * @param string $message
     * @see \Codeception\Module\Asserts::assertSame()
     */
    public function assertSame($expected, $actual, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertSame', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that two variables are not same
     *
     * @param        $expected
     * @param        $actual
     * @param string $message
     * @see \Codeception\Module\Asserts::assertNotSame()
     */
    public function assertNotSame($expected, $actual, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertNotSame', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that actual is greater than expected
     *
     * @param        $expected
     * @param        $actual
     * @param string $message
     * @see \Codeception\Module\Asserts::assertGreaterThan()
     */
    public function assertGreaterThan($expected, $actual, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertGreaterThan', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that actual is greater or equal than expected
     *
     * @param        $expected
     * @param        $actual
     * @param string $message
     * @see \Codeception\Module\Asserts::assertGreaterThanOrEqual()
     */
    public function assertGreaterThanOrEqual($expected, $actual, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertGreaterThanOrEqual', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that actual is less than expected
     *
     * @param        $expected
     * @param        $actual
     * @param string $message
     * @see \Codeception\Module\Asserts::assertLessThan()
     */
    public function assertLessThan($expected, $actual, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertLessThan', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that actual is less or equal than expected
     *
     * @param        $expected
     * @param        $actual
     * @param string $message
     * @see \Codeception\Module\Asserts::assertLessThanOrEqual()
     */
    public function assertLessThanOrEqual($expected, $actual, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertLessThanOrEqual', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that haystack contains needle
     *
     * @param        $needle
     * @param        $haystack
     * @param string $message
     * @see \Codeception\Module\Asserts::assertContains()
     */
    public function assertContains($needle, $haystack, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertContains', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that haystack doesn't contain needle.
     *
     * @param        $needle
     * @param        $haystack
     * @param string $message
     * @see \Codeception\Module\Asserts::assertNotContains()
     */
    public function assertNotContains($needle, $haystack, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertNotContains', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that string match with pattern
     *
     * @param string $pattern
     * @param string $string
     * @param string $message
     * @see \Codeception\Module\Asserts::assertRegExp()
     */
    public function assertRegExp($pattern, $string, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertRegExp', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that string not match with pattern
     *
     * @param string $pattern
     * @param string $string
     * @param string $message
     * @see \Codeception\Module\Asserts::assertNotRegExp()
     */
    public function assertNotRegExp($pattern, $string, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertNotRegExp', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that variable is empty.
     *
     * @param        $actual
     * @param string $message
     * @see \Codeception\Module\Asserts::assertEmpty()
     */
    public function assertEmpty($actual, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertEmpty', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that variable is not empty.
     *
     * @param        $actual
     * @param string $message
     * @see \Codeception\Module\Asserts::assertNotEmpty()
     */
    public function assertNotEmpty($actual, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertNotEmpty', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that variable is NULL
     *
     * @param        $actual
     * @param string $message
     * @see \Codeception\Module\Asserts::assertNull()
     */
    public function assertNull($actual, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertNull', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that variable is not NULL
     *
     * @param        $actual
     * @param string $message
     * @see \Codeception\Module\Asserts::assertNotNull()
     */
    public function assertNotNull($actual, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertNotNull', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that condition is positive.
     *
     * @param        $condition
     * @param string $message
     * @see \Codeception\Module\Asserts::assertTrue()
     */
    public function assertTrue($condition, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertTrue', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that condition is negative.
     *
     * @param        $condition
     * @param string $message
     * @see \Codeception\Module\Asserts::assertFalse()
     */
    public function assertFalse($condition, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertFalse', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks if file exists
     *
     * @param string $filename
     * @param string $message
     * @see \Codeception\Module\Asserts::assertFileExists()
     */
    public function assertFileExists($filename, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertFileExists', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks if file doesn't exist
     *
     * @param string $filename
     * @param string $message
     * @see \Codeception\Module\Asserts::assertFileNotExists()
     */
    public function assertFileNotExists($filename, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertFileNotExists', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param $expected
     * @param $actual
     * @param $description
     * @see \Codeception\Module\Asserts::assertGreaterOrEquals()
     */
    public function assertGreaterOrEquals($expected, $actual, $description = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertGreaterOrEquals', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param $expected
     * @param $actual
     * @param $description
     * @see \Codeception\Module\Asserts::assertLessOrEquals()
     */
    public function assertLessOrEquals($expected, $actual, $description = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertLessOrEquals', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param $actual
     * @param $description
     * @see \Codeception\Module\Asserts::assertIsEmpty()
     */
    public function assertIsEmpty($actual, $description = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertIsEmpty', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param $key
     * @param $actual
     * @param $description
     * @see \Codeception\Module\Asserts::assertArrayHasKey()
     */
    public function assertArrayHasKey($key, $actual, $description = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertArrayHasKey', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param $key
     * @param $actual
     * @param $description
     * @see \Codeception\Module\Asserts::assertArrayNotHasKey()
     */
    public function assertArrayNotHasKey($key, $actual, $description = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertArrayNotHasKey', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param $expectedCount
     * @param $actual
     * @param $description
     * @see \Codeception\Module\Asserts::assertCount()
     */
    public function assertCount($expectedCount, $actual, $description = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertCount', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param $class
     * @param $actual
     * @param $description
     * @see \Codeception\Module\Asserts::assertInstanceOf()
     */
    public function assertInstanceOf($class, $actual, $description = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertInstanceOf', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param $class
     * @param $actual
     * @param $description
     * @see \Codeception\Module\Asserts::assertNotInstanceOf()
     */
    public function assertNotInstanceOf($class, $actual, $description = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertNotInstanceOf', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param $type
     * @param $actual
     * @param $description
     * @see \Codeception\Module\Asserts::assertInternalType()
     */
    public function assertInternalType($type, $actual, $description = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertInternalType', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Fails the test with message.
     *
     * @param $message
     * @see \Codeception\Module\Asserts::fail()
     */
    public function fail($message) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('fail', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Handles and checks exception called inside callback function.
     * Either exception class name or exception instance should be provided.
     *
     * ```php
     * <?php
     * $I->expectException(MyException::class, function() {
     *     $this->doSomethingBad();
     * });
     *
     * $I->expectException(new MyException(), function() {
     *     $this->doSomethingBad();
     * });
     * ```
     * If you want to check message or exception code, you can pass them with exception instance:
     * ```php
     * <?php
     * // will check that exception MyException is thrown with "Don't do bad things" message
     * $I->expectException(new MyException("Don't do bad things"), function() {
     *     $this->doSomethingBad();
     * });
     * ```
     *
     * @param $exception string or \Exception
     * @param $callback
     * @see \Codeception\Module\Asserts::expectException()
     */
    public function expectException($exception, $callback) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('expectException', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * { @inheritdoc }
     * @see \Codeception\Module\Drupal7\Drupal7::bootstrapDrupal()
     */
    public function bootstrapDrupal() {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('bootstrapDrupal', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * { @inheritdoc }
     * @see \Codeception\Module\Drupal7\Drupal7::validateDrupalRoot()
     */
    public function validateDrupalRoot($root) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('validateDrupalRoot', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Get the Drupal root directory.
     *
     * @return string
     *   The root directory of the Drupal installation.
     * @see \Codeception\Module\DrupalBaseModule::getDrupalRoot()
     */
    public function getDrupalRoot() {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('getDrupalRoot', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Check that an entity type exists.
     *
     * @param string $entityMachineName
     *   The machine name of the entity you are testing for (i.e. node)
     * Conditional Assertion: Test won't be stopped on fail
     * @see \Codeception\Module\Drupal7\Drupal7::seeEntityExists()
     */
    public function canSeeEntityExists($entityMachineName) {
        return $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('seeEntityExists', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Check that an entity type exists.
     *
     * @param string $entityMachineName
     *   The machine name of the entity you are testing for (i.e. node)
     * @see \Codeception\Module\Drupal7\Drupal7::seeEntityExists()
     */
    public function seeEntityExists($entityMachineName) {
        return $this->getScenario()->runStep(new \Codeception\Step\Assertion('seeEntityExists', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Grab the output of entity_get_info().
     *
     * @param null $entityType
     *   The entity type, e.g. node, for which the info shall be returned, or NULL to return an array with info about
     *   all types.
     *
     * @return array
     *   Information about an entity type, or all entities if one was passed in.
     * @see \Codeception\Module\Drupal7\Drupal7::grabEntityInfo()
     */
    public function grabEntityInfo($entityType = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('grabEntityInfo', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Check that an entity type does not exist.
     *
     * @param string $entityMachineName
     *   The machine name of the entity you are testing for (i.e. node)
     * Conditional Assertion: Test won't be stopped on fail
     * @see \Codeception\Module\Drupal7\Drupal7::dontSeeEntityExists()
     */
    public function cantSeeEntityExists($entityMachineName) {
        return $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('dontSeeEntityExists', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Check that an entity type does not exist.
     *
     * @param string $entityMachineName
     *   The machine name of the entity you are testing for (i.e. node)
     * @see \Codeception\Module\Drupal7\Drupal7::dontSeeEntityExists()
     */
    public function dontSeeEntityExists($entityMachineName) {
        return $this->getScenario()->runStep(new \Codeception\Step\Assertion('dontSeeEntityExists', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Check that an entity type has a specific bundle.
     *
     * @param $entityMachineName
     *    The machine name of the entity you are testing (i.e. node)
     * @param $bundleMachineName
     *    The machine name of the bundle you are testing for (i.e. article)
     *
     * @return bool|void
     *     Will return true if test passes or void if it fails.
     * Conditional Assertion: Test won't be stopped on fail
     * @see \Codeception\Module\Drupal7\Drupal7::seeEntityHasBundle()
     */
    public function canSeeEntityHasBundle($entityMachineName, $bundleMachineName) {
        return $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('seeEntityHasBundle', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Check that an entity type has a specific bundle.
     *
     * @param $entityMachineName
     *    The machine name of the entity you are testing (i.e. node)
     * @param $bundleMachineName
     *    The machine name of the bundle you are testing for (i.e. article)
     *
     * @return bool|void
     *     Will return true if test passes or void if it fails.
     * @see \Codeception\Module\Drupal7\Drupal7::seeEntityHasBundle()
     */
    public function seeEntityHasBundle($entityMachineName, $bundleMachineName) {
        return $this->getScenario()->runStep(new \Codeception\Step\Assertion('seeEntityHasBundle', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Check that an entity type does not have a specific bundle.
     *
     * @param $entityMachineName
     *    The machine name of the entity you are testing (i.e. node)
     * @param $bundleMachineName
     *    The machine name of the bundle you are testing for (i.e. article)
     *
     * @return bool|void
     *     Will return true if test passes or void if it fails.
     * Conditional Assertion: Test won't be stopped on fail
     * @see \Codeception\Module\Drupal7\Drupal7::dontSeeEntityHasBundle()
     */
    public function cantSeeEntityHasBundle($entityMachineName, $bundleMachineName) {
        return $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('dontSeeEntityHasBundle', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Check that an entity type does not have a specific bundle.
     *
     * @param $entityMachineName
     *    The machine name of the entity you are testing (i.e. node)
     * @param $bundleMachineName
     *    The machine name of the bundle you are testing for (i.e. article)
     *
     * @return bool|void
     *     Will return true if test passes or void if it fails.
     * @see \Codeception\Module\Drupal7\Drupal7::dontSeeEntityHasBundle()
     */
    public function dontSeeEntityHasBundle($entityMachineName, $bundleMachineName) {
        return $this->getScenario()->runStep(new \Codeception\Step\Assertion('dontSeeEntityHasBundle', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Check that an entity type has a base field.
     *
     * @param string $entityMachineName
     *    The machine name of the entity you are testing (i.e. node)
     * @param string $baseField
     *    The name of the base field you are looking for.
     * @param string $schemaKey
     *    The key of the array item that contains the entity base fields.
     * Conditional Assertion: Test won't be stopped on fail
     * @see \Codeception\Module\Drupal7\Drupal7::seeEntityHasBaseField()
     */
    public function canSeeEntityHasBaseField($entityMachineName, $baseField, $schemaKey = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('seeEntityHasBaseField', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Check that an entity type has a base field.
     *
     * @param string $entityMachineName
     *    The machine name of the entity you are testing (i.e. node)
     * @param string $baseField
     *    The name of the base field you are looking for.
     * @param string $schemaKey
     *    The key of the array item that contains the entity base fields.
     * @see \Codeception\Module\Drupal7\Drupal7::seeEntityHasBaseField()
     */
    public function seeEntityHasBaseField($entityMachineName, $baseField, $schemaKey = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Assertion('seeEntityHasBaseField', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Check that an entity type does not have a base field.
     *
     * @param string $entityMachineName
     *    The machine name of the entity you are testing (i.e. node)
     * @param string $baseField
     *    The name of the base field you are looking for.
     * @param string $schemaKey
     *    The key of the array item that contains the entity base fields.
     * Conditional Assertion: Test won't be stopped on fail
     * @see \Codeception\Module\Drupal7\Drupal7::dontSeeEntityHasBaseField()
     */
    public function cantSeeEntityHasBaseField($entityMachineName, $baseField, $schemaKey = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('dontSeeEntityHasBaseField', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Check that an entity type does not have a base field.
     *
     * @param string $entityMachineName
     *    The machine name of the entity you are testing (i.e. node)
     * @param string $baseField
     *    The name of the base field you are looking for.
     * @param string $schemaKey
     *    The key of the array item that contains the entity base fields.
     * @see \Codeception\Module\Drupal7\Drupal7::dontSeeEntityHasBaseField()
     */
    public function dontSeeEntityHasBaseField($entityMachineName, $baseField, $schemaKey = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Assertion('dontSeeEntityHasBaseField', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Check that an entity type has a view mode assigned.
     *
     * @param string $entityMachineName
     *    The machine name of the entity you are testing (i.e. node)
     * @param string $viewModeMachineName
     *    The machine name of the view mode you are looking for (i.e. teaser)
     * Conditional Assertion: Test won't be stopped on fail
     * @see \Codeception\Module\Drupal7\Drupal7::seeEntityHasViewMode()
     */
    public function canSeeEntityHasViewMode($entityMachineName, $viewModeMachineName) {
        return $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('seeEntityHasViewMode', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Check that an entity type has a view mode assigned.
     *
     * @param string $entityMachineName
     *    The machine name of the entity you are testing (i.e. node)
     * @param string $viewModeMachineName
     *    The machine name of the view mode you are looking for (i.e. teaser)
     * @see \Codeception\Module\Drupal7\Drupal7::seeEntityHasViewMode()
     */
    public function seeEntityHasViewMode($entityMachineName, $viewModeMachineName) {
        return $this->getScenario()->runStep(new \Codeception\Step\Assertion('seeEntityHasViewMode', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Check that an entity type doesn't have a specific view mode assigned.
     *
     * @param string $entityMachineName
     *    The machine name of the entity you are testing (i.e. node)
     * @param string $viewModeMachineName
     *    The machine name of the view mode you are looking for (i.e. teaser)
     * Conditional Assertion: Test won't be stopped on fail
     * @see \Codeception\Module\Drupal7\Drupal7::dontSeeEntityHasViewMode()
     */
    public function cantSeeEntityHasViewMode($entityMachineName, $viewModeMachineName) {
        return $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('dontSeeEntityHasViewMode', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Check that an entity type doesn't have a specific view mode assigned.
     *
     * @param string $entityMachineName
     *    The machine name of the entity you are testing (i.e. node)
     * @param string $viewModeMachineName
     *    The machine name of the view mode you are looking for (i.e. teaser)
     * @see \Codeception\Module\Drupal7\Drupal7::dontSeeEntityHasViewMode()
     */
    public function dontSeeEntityHasViewMode($entityMachineName, $viewModeMachineName) {
        return $this->getScenario()->runStep(new \Codeception\Step\Assertion('dontSeeEntityHasViewMode', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Check that a field base exists.
     *
     * @param string $fieldName
     *   The field name you are looking for (i.e. field_image).
     * Conditional Assertion: Test won't be stopped on fail
     * @see \Codeception\Module\Drupal7\Drupal7::seeFieldExists()
     */
    public function canSeeFieldExists($fieldName) {
        return $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('seeFieldExists', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Check that a field base exists.
     *
     * @param string $fieldName
     *   The field name you are looking for (i.e. field_image).
     * @see \Codeception\Module\Drupal7\Drupal7::seeFieldExists()
     */
    public function seeFieldExists($fieldName) {
        return $this->getScenario()->runStep(new \Codeception\Step\Assertion('seeFieldExists', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Grab a list of all fields.
     *
     * This is simply a wrapper around field_info_field_map().
     *
     * @return array
     *   Information about an entity type, or all entities if one was passed in.
     * @see \Codeception\Module\Drupal7\Drupal7::grabFieldList()
     */
    public function grabFieldList() {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('grabFieldList', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Check that a field base does not exist.
     *
     * @param string $fieldName
     *   The field name you are looking for (i.e. field_image).
     * Conditional Assertion: Test won't be stopped on fail
     * @see \Codeception\Module\Drupal7\Drupal7::dontSeeFieldExists()
     */
    public function cantSeeFieldExists($fieldName) {
        return $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('dontSeeFieldExists', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Check that a field base does not exist.
     *
     * @param string $fieldName
     *   The field name you are looking for (i.e. field_image).
     * @see \Codeception\Module\Drupal7\Drupal7::dontSeeFieldExists()
     */
    public function dontSeeFieldExists($fieldName) {
        return $this->getScenario()->runStep(new \Codeception\Step\Assertion('dontSeeFieldExists', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Check that an entity bundle has a field instance attached.
     *
     * @param string $entityType
     *   The entity type the bundle is attached to.
     * @param string $fieldName
     *   The field name (i.e. field_image)
     * @param string $bundleName
     *   The bundle name you are looking on.
     *
     * @return void
     * Conditional Assertion: Test won't be stopped on fail
     * @see \Codeception\Module\Drupal7\Drupal7::seeBundleHasField()
     */
    public function canSeeBundleHasField($entityType, $fieldName, $bundleName) {
        return $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('seeBundleHasField', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Check that an entity bundle has a field instance attached.
     *
     * @param string $entityType
     *   The entity type the bundle is attached to.
     * @param string $fieldName
     *   The field name (i.e. field_image)
     * @param string $bundleName
     *   The bundle name you are looking on.
     *
     * @return void
     * @see \Codeception\Module\Drupal7\Drupal7::seeBundleHasField()
     */
    public function seeBundleHasField($entityType, $fieldName, $bundleName) {
        return $this->getScenario()->runStep(new \Codeception\Step\Assertion('seeBundleHasField', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Grab the information about a field instance attached to a bundle.
     *
     * This is simple a wrapper around field_info_instance.
     *
     * @param string $entityType
     *   The entity type the bundle is attached to.
     * @param string $fieldName
     *   The field name (i.e. field_image)
     * @param string $bundleName
     *   The bundle name you are looking on.
     * @return array|null
     *   An array containing the output of field_info_instance or null if the field instance doesn't exist.
     * @see \Codeception\Module\Drupal7\Drupal7::grabFieldInstance()
     */
    public function grabFieldInstance($entityType, $fieldName, $bundleName) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('grabFieldInstance', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Check that an entity bundle does not have a field instance attached.
     *
     * @param string $entityType
     *   The entity type the bundle is attached to.
     * @param string $fieldName
     *   The field name (i.e. field_image)
     * @param string $bundleName
     *   The bundle name you are looking on.
     *
     * @return void
     * Conditional Assertion: Test won't be stopped on fail
     * @see \Codeception\Module\Drupal7\Drupal7::dontSeeBundleHasField()
     */
    public function cantSeeBundleHasField($entityType, $fieldName, $bundleName) {
        return $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('dontSeeBundleHasField', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Check that an entity bundle does not have a field instance attached.
     *
     * @param string $entityType
     *   The entity type the bundle is attached to.
     * @param string $fieldName
     *   The field name (i.e. field_image)
     * @param string $bundleName
     *   The bundle name you are looking on.
     *
     * @return void
     * @see \Codeception\Module\Drupal7\Drupal7::dontSeeBundleHasField()
     */
    public function dontSeeBundleHasField($entityType, $fieldName, $bundleName) {
        return $this->getScenario()->runStep(new \Codeception\Step\Assertion('dontSeeBundleHasField', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     *
     * @see \Codeception\Module\Db::isPopulated()
     */
    public function isPopulated() {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('isPopulated', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Inserts an SQL record into a database. This record will be erased after the test.
     *
     * ```php
     * <?php
     * $I->haveInDatabase('users', array('name' => 'miles', 'email' => 'miles@davis.com'));
     * ?>
     * ```
     *
     * @param string $table
     * @param array $data
     *
     * @return integer $id
     * @see \Codeception\Module\Db::haveInDatabase()
     */
    public function haveInDatabase($table, $data) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('haveInDatabase', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a row with the given column values exists.
     * Provide table name and column values.
     *
     * ``` php
     * <?php
     * $I->seeInDatabase('users', array('name' => 'Davert', 'email' => 'davert@mail.com'));
     * ```
     * Fails if no such user found.
     *
     * @param string $table
     * @param array $criteria
     * Conditional Assertion: Test won't be stopped on fail
     * @see \Codeception\Module\Db::seeInDatabase()
     */
    public function canSeeInDatabase($table, $criteria = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('seeInDatabase', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a row with the given column values exists.
     * Provide table name and column values.
     *
     * ``` php
     * <?php
     * $I->seeInDatabase('users', array('name' => 'Davert', 'email' => 'davert@mail.com'));
     * ```
     * Fails if no such user found.
     *
     * @param string $table
     * @param array $criteria
     * @see \Codeception\Module\Db::seeInDatabase()
     */
    public function seeInDatabase($table, $criteria = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Assertion('seeInDatabase', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that the given number of records were found in the database.
     *
     * ```php
     * <?php
     * $I->seeNumRecords(1, 'users', ['name' => 'davert'])
     * ?>
     * ```
     *
     * @param int $expectedNumber Expected number
     * @param string $table Table name
     * @param array $criteria Search criteria [Optional]
     * Conditional Assertion: Test won't be stopped on fail
     * @see \Codeception\Module\Db::seeNumRecords()
     */
    public function canSeeNumRecords($expectedNumber, $table, $criteria = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('seeNumRecords', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that the given number of records were found in the database.
     *
     * ```php
     * <?php
     * $I->seeNumRecords(1, 'users', ['name' => 'davert'])
     * ?>
     * ```
     *
     * @param int $expectedNumber Expected number
     * @param string $table Table name
     * @param array $criteria Search criteria [Optional]
     * @see \Codeception\Module\Db::seeNumRecords()
     */
    public function seeNumRecords($expectedNumber, $table, $criteria = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Assertion('seeNumRecords', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Effect is opposite to ->seeInDatabase
     *
     * Asserts that there is no record with the given column values in a database.
     * Provide table name and column values.
     *
     * ``` php
     * <?php
     * $I->dontSeeInDatabase('users', array('name' => 'Davert', 'email' => 'davert@mail.com'));
     * ```
     * Fails if such user was found.
     *
     * @param string $table
     * @param array $criteria
     * Conditional Assertion: Test won't be stopped on fail
     * @see \Codeception\Module\Db::dontSeeInDatabase()
     */
    public function cantSeeInDatabase($table, $criteria = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('dontSeeInDatabase', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Effect is opposite to ->seeInDatabase
     *
     * Asserts that there is no record with the given column values in a database.
     * Provide table name and column values.
     *
     * ``` php
     * <?php
     * $I->dontSeeInDatabase('users', array('name' => 'Davert', 'email' => 'davert@mail.com'));
     * ```
     * Fails if such user was found.
     *
     * @param string $table
     * @param array $criteria
     * @see \Codeception\Module\Db::dontSeeInDatabase()
     */
    public function dontSeeInDatabase($table, $criteria = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Assertion('dontSeeInDatabase', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Fetches a single column value from a database.
     * Provide table name, desired column and criteria.
     *
     * ``` php
     * <?php
     * $mail = $I->grabFromDatabase('users', 'email', array('name' => 'Davert'));
     * ```
     *
     * @param string $table
     * @param string $column
     * @param array $criteria
     *
     * @return mixed
     * @see \Codeception\Module\Db::grabFromDatabase()
     */
    public function grabFromDatabase($table, $column, $criteria = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('grabFromDatabase', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Returns the number of rows in a database
     *
     * @param string $table    Table name
     * @param array  $criteria Search criteria [Optional]
     *
     * @return int
     * @see \Codeception\Module\Db::grabNumRecords()
     */
    public function grabNumRecords($table, $criteria = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('grabNumRecords', func_get_args()));
    }
}
